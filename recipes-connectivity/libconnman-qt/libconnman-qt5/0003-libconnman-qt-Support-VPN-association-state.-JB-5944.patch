From acb099cf4eef40b4801f7aeda7004ace04f35b0f Mon Sep 17 00:00:00 2001
From: Jussi Laakkonen <jussi.laakkonen@jolla.com>
Date: Tue, 29 Nov 2022 18:34:09 +0200
Subject: [PATCH] [libconnman-qt] Support VPN association state. JB#59447

Add support for the association state for VPNs. This is the state when
VPN is querying VPN agent (user) for credentials. Behavior is similar as
with other services as association is the generic state in connmand that
is the state prior to configuration.
---
 libconnman-qt/marshalutils.cpp | 1 +
 libconnman-qt/vpnconnection.h  | 1 +
 libconnman-qt/vpnmanager.cpp   | 7 +++++--
 plugin/plugins.qmltypes        | 7 ++++---
 4 files changed, 11 insertions(+), 5 deletions(-)

diff --git a/libconnman-qt/marshalutils.cpp b/libconnman-qt/marshalutils.cpp
index 9190d85..83dfde1 100644
--- a/libconnman-qt/marshalutils.cpp
+++ b/libconnman-qt/marshalutils.cpp
@@ -45,6 +45,7 @@ QVariant convertState (const QString &key, const QVariant &value, bool toDBus)
     QList<QPair<QVariant, QVariant> > states;
     states.push_back(qMakePair(QVariant::fromValue(QStringLiteral("idle")), QVariant::fromValue(static_cast<int>(VpnConnection::Idle))));
     states.push_back(qMakePair(QVariant::fromValue(QStringLiteral("failure")), QVariant::fromValue(static_cast<int>(VpnConnection::Failure))));
+    states.push_back(qMakePair(QVariant::fromValue(QStringLiteral("association")), QVariant::fromValue(static_cast<int>(VpnConnection::Association))));
     states.push_back(qMakePair(QVariant::fromValue(QStringLiteral("configuration")), QVariant::fromValue(static_cast<int>(VpnConnection::Configuration))));
     states.push_back(qMakePair(QVariant::fromValue(QStringLiteral("ready")), QVariant::fromValue(static_cast<int>(VpnConnection::Ready))));
     states.push_back(qMakePair(QVariant::fromValue(QStringLiteral("disconnect")), QVariant::fromValue(static_cast<int>(VpnConnection::Disconnect))));
diff --git a/libconnman-qt/vpnconnection.h b/libconnman-qt/vpnconnection.h
index b5e22fc..cdc0b06 100644
--- a/libconnman-qt/vpnconnection.h
+++ b/libconnman-qt/vpnconnection.h
@@ -81,6 +81,7 @@ public:
     enum ConnectionState {
         Idle,
         Failure,
+        Association,
         Configuration,
         Ready,
         Disconnect
diff --git a/libconnman-qt/vpnmanager.cpp b/libconnman-qt/vpnmanager.cpp
index e2d51e5..60e09df 100644
--- a/libconnman-qt/vpnmanager.cpp
+++ b/libconnman-qt/vpnmanager.cpp
@@ -208,7 +208,9 @@ void VpnManager::deleteConnection(const QString &path)
     Q_D(VpnManager);
 
     if (VpnConnection *conn = connection(path)) {
-        if (conn->state() == VpnConnection::Ready || conn->state() == VpnConnection::Configuration) {
+        if (conn->state() == VpnConnection::Ready ||
+                                conn->state() == VpnConnection::Configuration ||
+                                conn->state() == VpnConnection::Association) {
             conn->setAutoConnect(false);
 
             connect(conn, &VpnConnection::stateChanged, this, [this, path, conn](){
@@ -244,7 +246,8 @@ void VpnManager::activateConnection(const QString &path)
     for (VpnConnection *conn : d->m_items) {
         QString otherPath = conn->path();
         if (otherPath != path && (conn->state() == VpnConnection::Ready ||
-                                  conn->state() == VpnConnection::Configuration)) {
+                                conn->state() == VpnConnection::Configuration ||
+                                conn->state() == VpnConnection::Association)) {
             deactivateConnection(otherPath);
             qDebug() << "Adding pending vpn disconnect" << otherPath << conn->state() << "when connecting to vpn";
         }
diff --git a/plugin/plugins.qmltypes b/plugin/plugins.qmltypes
index 9f51ddf..d050750 100644
--- a/plugin/plugins.qmltypes
+++ b/plugin/plugins.qmltypes
@@ -912,9 +912,10 @@ Module {
             values: {
                 "Idle": 0,
                 "Failure": 1,
-                "Configuration": 2,
-                "Ready": 3,
-                "Disconnect": 4
+                "Association": 2,
+                "Configuration": 3,
+                "Ready": 4,
+                "Disconnect": 5
             }
         }
         Property { name: "path"; type: "string"; isReadonly: true }
