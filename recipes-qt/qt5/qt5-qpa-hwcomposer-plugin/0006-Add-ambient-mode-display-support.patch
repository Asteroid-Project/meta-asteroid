From 1c568ba41538408449a77e58357d16bbbb197bf4 Mon Sep 17 00:00:00 2001
From: MagneFire <IDaNLContact@gmail.com>
Date: Mon, 6 Jul 2020 22:03:51 +0200
Subject: [PATCH] Add ambient mode display support. Add ability to keep the
 screen on while in deep sleep mode. This is achieved by setting the power
 mode to HWC_POWER_MODE_DOZE_SUSPEND.

https://android.googlesource.com/platform/hardware/libhardware/+/refs/heads/master/include/hardware/hwcomposer_defs.h#299 implies that the power mode needs to be changed to update the screen, but according to several tests (on sturgeon and smelt) this seems to be not necessary. Swapping the buffer while the screen is off still appears to update the screen.
---
 hwcomposer/hwcomposer_backend.h       |  2 ++
 hwcomposer/hwcomposer_backend_v11.cpp | 33 +++++++++++++++++++++++++--
 hwcomposer/hwcomposer_backend_v11.h   |  3 +++
 hwcomposer/hwcomposer_context.cpp     | 15 +++++++++++-
 hwcomposer/hwcomposer_context.h       |  3 +++
 hwcomposer/qeglfsintegration.cpp      |  6 +++++
 6 files changed, 59 insertions(+), 3 deletions(-)

diff --git a/hwcomposer/hwcomposer_backend.h b/hwcomposer/hwcomposer_backend.h
index 5c579aa..fffc3d8 100644
--- a/hwcomposer/hwcomposer_backend.h
+++ b/hwcomposer/hwcomposer_backend.h
@@ -106,6 +106,8 @@ public:
     virtual EGLNativeWindowType createWindow(int width, int height) = 0;
     virtual void destroyWindow(EGLNativeWindowType window) = 0;
     virtual void swap(EGLNativeDisplayType display, EGLSurface surface) = 0;
+    virtual bool ambientModeSupport() {return false;}
+    virtual void ambientModeEnabled(bool enable) {Q_UNUSED(enable);}
     virtual void sleepDisplay(bool sleep) = 0;
     virtual float refreshRate() = 0;
 
diff --git a/hwcomposer/hwcomposer_backend_v11.cpp b/hwcomposer/hwcomposer_backend_v11.cpp
index 933fa17..353a144 100644
--- a/hwcomposer/hwcomposer_backend_v11.cpp
+++ b/hwcomposer/hwcomposer_backend_v11.cpp
@@ -320,6 +320,27 @@ HwComposerBackend_v11::swap(EGLNativeDisplayType display, EGLSurface surface)
 #endif
 }
 
+bool HwComposerBackend_v11::ambientModeSupport()
+{
+#ifdef HWC_DEVICE_API_VERSION_1_4
+        if (hwc_version == HWC_DEVICE_API_VERSION_1_4) {
+            return true;
+        } else
+#endif
+#ifdef HWC_DEVICE_API_VERSION_1_5
+        if (hwc_version == HWC_DEVICE_API_VERSION_1_5) {
+            return true;
+        } else
+#endif
+            return false;
+}
+
+void HwComposerBackend_v11::ambientModeEnabled(bool enable)
+{
+    if (ambientModeSupport()) {
+        m_ambientMode = enable;
+    }
+}
 void
 HwComposerBackend_v11::sleepDisplay(bool sleep)
 {
@@ -333,12 +354,20 @@ HwComposerBackend_v11::sleepDisplay(bool sleep)
 
 #ifdef HWC_DEVICE_API_VERSION_1_4
         if (hwc_version == HWC_DEVICE_API_VERSION_1_4) {
-            HWC_PLUGIN_EXPECT_ZERO(hwc_device->setPowerMode(hwc_device, 0, HWC_POWER_MODE_OFF));
+            if (m_ambientMode) {
+                HWC_PLUGIN_EXPECT_ZERO(hwc_device->setPowerMode(hwc_device, 0, HWC_POWER_MODE_DOZE_SUSPEND));
+            } else {
+                HWC_PLUGIN_EXPECT_ZERO(hwc_device->setPowerMode(hwc_device, 0, HWC_POWER_MODE_OFF));
+            }
         } else
 #endif
 #ifdef HWC_DEVICE_API_VERSION_1_5
         if (hwc_version == HWC_DEVICE_API_VERSION_1_5) {
-            HWC_PLUGIN_EXPECT_ZERO(hwc_device->setPowerMode(hwc_device, 0, HWC_POWER_MODE_OFF));
+            if (m_ambientMode) {
+                HWC_PLUGIN_EXPECT_ZERO(hwc_device->setPowerMode(hwc_device, 0, HWC_POWER_MODE_DOZE_SUSPEND));
+            } else {
+                HWC_PLUGIN_EXPECT_ZERO(hwc_device->setPowerMode(hwc_device, 0, HWC_POWER_MODE_OFF));
+            }
         } else
 #endif
             HWC_PLUGIN_EXPECT_ZERO(hwc_device->blank(hwc_device, 0, 1));
diff --git a/hwcomposer/hwcomposer_backend_v11.h b/hwcomposer/hwcomposer_backend_v11.h
index 98561de..9a623de 100644
--- a/hwcomposer/hwcomposer_backend_v11.h
+++ b/hwcomposer/hwcomposer_backend_v11.h
@@ -63,6 +63,8 @@ public:
     virtual EGLNativeWindowType createWindow(int width, int height);
     virtual void destroyWindow(EGLNativeWindowType window);
     virtual void swap(EGLNativeDisplayType display, EGLSurface surface);
+    virtual bool ambientModeSupport() Q_DECL_OVERRIDE;
+    virtual void ambientModeEnabled(bool enable) Q_DECL_OVERRIDE;
     virtual void sleepDisplay(bool sleep);
     virtual float refreshRate();
 
@@ -79,6 +81,7 @@ private:
     uint32_t hwc_version;
     int num_displays;
 
+    bool m_ambientMode;
     bool m_displayOff;
     QBasicTimer m_deliverUpdateTimeout;
     QBasicTimer m_vsyncTimeout;
diff --git a/hwcomposer/hwcomposer_context.cpp b/hwcomposer/hwcomposer_context.cpp
index 15ce986..74435a7 100644
--- a/hwcomposer/hwcomposer_context.cpp
+++ b/hwcomposer/hwcomposer_context.cpp
@@ -74,6 +74,7 @@ HwComposerContext::HwComposerContext()
     : info(new HwComposerScreenInfo())
     , backend(NULL)
     , display_off(false)
+    , ambientMode(false)
     , window_created(false)
     , fps(0)
 {
@@ -161,7 +162,7 @@ void HwComposerContext::destroyNativeWindow(EGLNativeWindowType window)
 
 void HwComposerContext::swapToWindow(QEglFSContext *context, QPlatformSurface *surface)
 {
-    if (display_off) {
+    if (display_off && !ambientMode) {
         qWarning("Swap requested while display is off");
         return;
     }
@@ -170,6 +171,18 @@ void HwComposerContext::swapToWindow(QEglFSContext *context, QPlatformSurface *s
     EGLSurface egl_surface = context->eglSurfaceForPlatformSurface(surface);
     return backend->swap(egl_display, egl_surface);
 }
+bool HwComposerContext::ambientModeSupport()
+{
+    return backend->ambientModeSupport();
+}
+
+void HwComposerContext::ambientModeEnabled(bool enable)
+{
+    if (!ambientModeSupport()) return;
+
+    ambientMode = enable;
+    backend->ambientModeEnabled(enable);
+}
 
 void HwComposerContext::sleepDisplay(bool sleep)
 {
diff --git a/hwcomposer/hwcomposer_context.h b/hwcomposer/hwcomposer_context.h
index 1d78a2c..5044a35 100644
--- a/hwcomposer/hwcomposer_context.h
+++ b/hwcomposer/hwcomposer_context.h
@@ -79,6 +79,8 @@ public:
 
     void swapToWindow(QEglFSContext *context, QPlatformSurface *surface);
 
+    bool ambientModeSupport();
+    void ambientModeEnabled(bool enable);
     void sleepDisplay(bool sleep);
     qreal refreshRate() const;
 
@@ -88,6 +90,7 @@ private:
     HwComposerScreenInfo *info;
     HwComposerBackend *backend;
     bool display_off;
+    bool ambientMode;
     bool window_created;
     qreal fps;
 };
diff --git a/hwcomposer/qeglfsintegration.cpp b/hwcomposer/qeglfsintegration.cpp
index 112bfd8..811a217 100644
--- a/hwcomposer/qeglfsintegration.cpp
+++ b/hwcomposer/qeglfsintegration.cpp
@@ -195,6 +195,12 @@ void *QEglFSIntegration::nativeResourceForIntegration(const QByteArray &resource
 
     if (lowerCaseResource == "egldisplay") {
         return static_cast<QEglFSScreen *>(mScreen)->display();
+    } else if (lowerCaseResource == "ambientsupported") {
+        return reinterpret_cast<void *>(mHwc->ambientModeSupport());
+    } else if (lowerCaseResource == "ambientenable") {
+        mHwc->ambientModeEnabled(true);
+    } else if (lowerCaseResource == "ambientdisable") {
+        mHwc->ambientModeEnabled(false);
     } else if (lowerCaseResource == "displayoff") {
         // Called from lipstick to turn off the display (src/homeapplication.cpp)
         mHwc->sleepDisplay(true);
-- 
2.28.0

